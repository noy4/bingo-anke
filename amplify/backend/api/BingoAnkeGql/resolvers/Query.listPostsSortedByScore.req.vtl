## [Start] Set query expression for @key **
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.numberOfBingoScore) && $util.isNullOrBlank($ctx.args.type) )
  $util.error("When providing argument 'numberOfBingoScore' you must also provide 'type'.", "InvalidArgumentsError")
#end
#if( !$util.isNull($ctx.args.numberOfBingoScore) )
  #set( $sortKeyArgumentOperations = $ctx.args.numberOfBingoScore.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error("Argument numberOfBingoScore must specify at most one key condition operation.", "InvalidArgumentsError")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == "between" )
      #if( $ctx.args.numberOfBingoScore.between.size() != 2 )
        $util.error("Argument 'numberOfBingoScore.between' expects exactly two elements.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.numberOfBingoScore.between[0].score) && $util.isNullOrBlank($ctx.args.numberOfBingoScore.between[0].numberOfBingo) )
        $util.error("When providing argument 'numberOfBingoScore.between[0].score' you must also provide 'numberOfBingoScore.between[0].numberOfBingo'.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.numberOfBingoScore.between[1].score) && $util.isNullOrBlank($ctx.args.numberOfBingoScore.between[1].numberOfBingo) )
        $util.error("When providing argument 'numberOfBingoScore.between[1].score' you must also provide 'numberOfBingoScore.between[1].numberOfBingo'.", "InvalidArgumentsError")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.numberOfBingoScore.get("$operation").score) && $util.isNullOrBlank($ctx.args.numberOfBingoScore.get("$operation").numberOfBingo) )
        $util.error("When providing argument 'numberOfBingoScore.$operation.score' you must also provide 'numberOfBingoScore.$operation.numberOfBingo'.", "InvalidArgumentsError")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.type) )
  #set( $modelQueryExpression.expression = "#type = :type" )
  #set( $modelQueryExpression.expressionNames = {
  "#type": "type"
} )
  #set( $modelQueryExpression.expressionValues = {
  ":type": {
      "S": "$ctx.args.type"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = "" )
#set( $sortKeyValue2 = "" )
#if( !$util.isNull($ctx.args.numberOfBingoScore) && !$util.isNull($ctx.args.numberOfBingoScore.beginsWith) )
#if( !$util.isNull($ctx.args.numberOfBingoScore.beginsWith.numberOfBingo) ) #set( $sortKeyValue = "$ctx.args.numberOfBingoScore.beginsWith.numberOfBingo" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.beginsWith.score) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.numberOfBingoScore.beginsWith.score" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "numberOfBingo#score"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.numberOfBingoScore) && !$util.isNull($ctx.args.numberOfBingoScore.between) )
  #if( $ctx.args.numberOfBingoScore.between.size() != 2 )
    $util.error("Argument numberOfBingoScore.between expects exactly 2 elements.")
  #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.between[0].numberOfBingo) ) #set( $sortKeyValue = "$ctx.args.numberOfBingoScore.between[0].numberOfBingo" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.between[0].score) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.numberOfBingoScore.between[0].score" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.between[1].numberOfBingo) ) #set( $sortKeyValue2 = "$ctx.args.numberOfBingoScore.between[1].numberOfBingo" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.between[1].score) ) #set( $sortKeyValue2 = "$sortKeyValue2#$ctx.args.numberOfBingoScore.between[1].score" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "numberOfBingo#score"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey0", { "S": "$sortKeyValue" }))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey1", { "S": "$sortKeyValue2" }))
#end
#if( !$util.isNull($ctx.args.numberOfBingoScore) && !$util.isNull($ctx.args.numberOfBingoScore.eq) )
#if( !$util.isNull($ctx.args.numberOfBingoScore.eq.numberOfBingo) ) #set( $sortKeyValue = "$ctx.args.numberOfBingoScore.eq.numberOfBingo" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.eq.score) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.numberOfBingoScore.eq.score" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey = :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "numberOfBingo#score"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.numberOfBingoScore) && !$util.isNull($ctx.args.numberOfBingoScore.lt) )
#if( !$util.isNull($ctx.args.numberOfBingoScore.lt.numberOfBingo) ) #set( $sortKeyValue = "$ctx.args.numberOfBingoScore.lt.numberOfBingo" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.lt.score) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.numberOfBingoScore.lt.score" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey < :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "numberOfBingo#score"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.numberOfBingoScore) && !$util.isNull($ctx.args.numberOfBingoScore.le) )
#if( !$util.isNull($ctx.args.numberOfBingoScore.le.numberOfBingo) ) #set( $sortKeyValue = "$ctx.args.numberOfBingoScore.le.numberOfBingo" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.le.score) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.numberOfBingoScore.le.score" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey <= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "numberOfBingo#score"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.numberOfBingoScore) && !$util.isNull($ctx.args.numberOfBingoScore.gt) )
#if( !$util.isNull($ctx.args.numberOfBingoScore.gt.numberOfBingo) ) #set( $sortKeyValue = "$ctx.args.numberOfBingoScore.gt.numberOfBingo" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.gt.score) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.numberOfBingoScore.gt.score" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey > :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "numberOfBingo#score"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.numberOfBingoScore) && !$util.isNull($ctx.args.numberOfBingoScore.ge) )
#if( !$util.isNull($ctx.args.numberOfBingoScore.ge.numberOfBingo) ) #set( $sortKeyValue = "$ctx.args.numberOfBingoScore.ge.numberOfBingo" ) #end
#if( !$util.isNull($ctx.args.numberOfBingoScore.ge.score) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.numberOfBingoScore.ge.score" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey >= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "numberOfBingo#score"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for @key **
#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $QueryRequest = {
  "version": "2017-02-28",
  "operation": "Query",
  "limit": $limit,
  "query": $modelQueryExpression,
  "index": "SortByScore"
} )
#if( !$util.isNull($ctx.args.sortDirection)
                    && $ctx.args.sortDirection == "DESC" )
  #set( $QueryRequest.scanIndexForward = false )
#else
  #set( $QueryRequest.scanIndexForward = true )
#end
#if( $context.args.nextToken ) #set( $QueryRequest.nextToken = $context.args.nextToken ) #end
#if( $context.args.filter ) #set( $QueryRequest.filter = $util.parseJson("$util.transform.toDynamoDBFilterExpression($ctx.args.filter)") ) #end
$util.toJson($QueryRequest)